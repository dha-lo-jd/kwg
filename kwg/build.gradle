apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

repositories { mavenCentral() }

eclipse {
	def jarsSrcDir = file(forgeDir + forgeJarsSrcDir)
	copy{
		from jarsSrcDir
		into tempBaseDir + '/' +modDir + '/jars'
	}

	def launchFileTemplateName = 'kwg/mod.launch.template'
	def launchFileTemplate = file("$launchFileTemplateName")
	def generatedLaunchFile = file(modName + modVersion + ".launch")

	def launchBindings = [
		forgeDir:forgeDir,
		mcVersion:mcVersion,
		javaVersion:javaVersion,
		projectName:projectName,
	]
	def engine = new groovy.text.SimpleTemplateEngine()
	generatedLaunchFile.withWriter { w ->
		w << engine.createTemplate(launchFileTemplate).make(launchBindings).toString()
	}

	pom {
		project {
			groupId modGroupId;
			artifactId modArtifactId;
			version modVersion;
			build {
				sourceDirectory 'src'
				outputDirectory 'bin'

				testSourceDirectory 'test'
				testOutputDirectory 'bin_test'

				plugins {
					plugin {
						artifactId 'maven-compiler-plugin'
						version '3.0'
						configuration {
							source javaVersion
							target javaVersion
						}
					}
				}
			}
			dependencies{
				dependency {
					groupId 'org.lo.d'
					artifactId 'Dependency_Base'
					version mcVersion
				}
			}
		}
	}.writeTo('pom.xml')

	project {

		file {
			//closure executed after .project content is loaded from existing file
			//but before gradle build information is merged
			beforeMerged { project ->

				def f = file(modsReposBaseDir);
				if(file("$projectDir") == file("$f/$srcReposDir/$modDir")){
					return;
				}
				//if you want skip merging natures... (a very abstract example)
				project.linkedResources.clear()

				natures 'org.eclipse.m2e.core.maven2Nature';
				buildCommand 'org.eclipse.m2e.core.maven2Builder';

				def srcLinks = [('src' + srcDirName):srcReposDir, 'res':resReposDir,]
				srcLinks.each {key,value ->

					def uri = '$%7BMCP_REPOS_LOC%7D/' + value
					linkedResource name: key, type: '2',locationUri: uri
				}

				def tempLinks = [
					'jars',
					'bin',
					'test',
					'bin_test',
				]
				tempLinks.each {link ->
					def uri = '$%7BMCP_TEMP_LOC%7D/' + link
					linkedResource name: link, type: '2', locationUri: uri
				}
			}
			withXml { provider ->
				def variables = [
					'MCP_REPOS_BASE_LOC':modsReposBaseDir,
					'MCP_TEMP_BASE_LOC':tempBaseDir,
					'MCP_REPOS_LOC':'$%7BMCP_REPOS_BASE_LOC%7D/' + modDir,
					'MCP_TEMP_LOC':'$%7BMCP_TEMP_BASE_LOC%7D/' + modDir,
				]
				def xml = provider.asNode()

				def variableList = xml.get('variableList')[0]
				if(variableList == null){
					variableList = xml.appendNode('variableList')
				}

				variables.each{key,value ->
					def variable = variableList.get('variable').find{
						it.get('name')[0].text() == key
					}
					if(variable==null){
						variable = variableList.appendNode('variable')
						variable.appendNode('name',key)
						variable.appendNode('value',value)
					}
				}

			}
		}
	}
}